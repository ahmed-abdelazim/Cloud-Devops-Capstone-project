version: 2.1
orbs:
  docker: circleci/docker@1.5.0

jobs:
  lint:
    docker:
      - image: circleci/php
    steps:
      - checkout
      - run:
          name: Lint php code
          command: |
            php -l ./app/index.php

  create-cluster:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install dependencies
          command:  |
            yum -y install tar gzip jq
      - run:
          name: install eksctl
          command:  |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
      - run:
          name: check if cluster exists
          command:  |
              CLUSTER=$(yes | eksctl get cluster -o json | jq -r .[]."metadata"."name" || true)
              echo $CLUSTER
              if [ -z $CLUSTER ]
              then
              eksctl create cluster ahmed-capstone
              fi
  
  deploy-app:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install dependencies
          command:  |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            mv kubectl /usr/bin
            # login into cluster
            aws eks update-kubeconfig --name ahmed-capstone
      - run:
          name: Deploy
          command:  |
            WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
            deployment=$(cat ./.circleci/kubernetes/deployment.yml | sed "s/{{WorkflowID}}/$WorkflowID/g")
            service=$(cat ./.circleci/kubernetes/service.yml | sed "s/{{WorkflowID}}/$WorkflowID/g")
            echo "$deployment" | kubectl apply -f - 
            echo "$service" | kubectl create -f -
            sleep 10
            elbUrl=$(kubectl get service | grep $WorkflowID | awk '{print $4}')
            # send ELB url to memstash
            curl -H "Content-Type: text/plain" -H "token: adfa8598-ef10-4708-9e9d-c7a3e1af267a" --request PUT --data "$elbUrl" https://api.memstash.io/values/elbUrl 

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip jq
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file ".circleci/cloudformation/cloudfront.yml" \
              --stack-name ahmed-capstone \
              --parameter-overrides elbUrl=$(curl -H "token: adfa8598-ef10-4708-9e9d-c7a3e1af267a" --request GET https://api.memstash.io/values/elbUrl)\
              --tags project=capstone
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install dependencies
          command:  |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            mv kubectl /usr/bin
            # login into cluster
            aws eks update-kubeconfig --name ahmed-capstone
      - run:
          name: delete old deployments and services
          command:  |
            kubectl get service -o=name | grep capstone-service | grep -v ${CIRCLE_WORKFLOW_ID:0:7} | xargs -I{} kubectl delete {}      
            kubectl get deployment -o=name | grep capstone-deployment | grep -v ${CIRCLE_WORKFLOW_ID:0:7} | xargs -I{} kubectl delete {}      

workflows:
  default:
    jobs:
      - lint
      - docker/publish:
          image: abdelazim/capstone
          tag: latest
      - create-cluster
      - deploy-app:
          requires: [create-cluster, docker/publish]
      #- cloudfront-update
      - cloudfront-update:
          requires: [deploy-app]            
      - cleanup:
          requires: [cloudfront-update]
